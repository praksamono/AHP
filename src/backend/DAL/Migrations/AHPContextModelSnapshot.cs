// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AHPContext))]
    partial class AHPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.AlternativeEntity", b =>
                {
                    b.Property<Guid>("AlternativeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternativeName")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("GlobalPriority");

                    b.Property<Guid>("GoalId");

                    b.HasKey("AlternativeId");

                    b.HasIndex("GoalId");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("DAL.CriteriumAlternativeEntity", b =>
                {
                    b.Property<Guid>("CriteriumId");

                    b.Property<Guid>("AlternativeId");

                    b.Property<Guid>("CriteriumAlternativeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("LocalPriority");

                    b.HasKey("CriteriumId", "AlternativeId");

                    b.HasAlternateKey("AlternativeId", "CriteriumAlternativeId");

                    b.ToTable("CriteriumAlternatives");
                });

            modelBuilder.Entity("DAL.CriteriumEntity", b =>
                {
                    b.Property<Guid>("CriteriumId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CriteriumName")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("GlobalCriteriumPriority");

                    b.Property<Guid>("GoalId");

                    b.HasKey("CriteriumId");

                    b.HasIndex("GoalId");

                    b.ToTable("Criteriums");
                });

            modelBuilder.Entity("DAL.GoalEntity", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("GoalName")
                        .IsRequired();

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("DAL.AlternativeEntity", b =>
                {
                    b.HasOne("DAL.GoalEntity", "GoalEntity")
                        .WithMany("Alternatives")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.CriteriumAlternativeEntity", b =>
                {
                    b.HasOne("DAL.AlternativeEntity", "AlternativeEntity")
                        .WithMany("CriteriumAlternatives")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.CriteriumEntity", "CriteriumEntity")
                        .WithMany("CriteriumAlternatives")
                        .HasForeignKey("CriteriumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.CriteriumEntity", b =>
                {
                    b.HasOne("DAL.GoalEntity", "GoalEntity")
                        .WithMany("Criteriums")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
