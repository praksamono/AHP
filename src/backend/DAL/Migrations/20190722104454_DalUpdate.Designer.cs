// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AHPContext))]
    [Migration("20190722104454_DalUpdate")]
    partial class DalUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.AlternativeEntity", b =>
                {
                    b.Property<int>("AlternativeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("GlobalPriority");

                    b.Property<int?>("GoalEntityGoalId");

                    b.HasKey("AlternativeId");

                    b.HasIndex("GoalEntityGoalId");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("DAL.CriteriumAlternativeEntity", b =>
                {
                    b.Property<int>("CriteriumId");

                    b.Property<int>("AlternativeId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("LocalPriority");

                    b.HasKey("CriteriumId", "AlternativeId");

                    b.HasAlternateKey("AlternativeId");

                    b.ToTable("CriteriumAlternatives");
                });

            modelBuilder.Entity("DAL.CriteriumEntity", b =>
                {
                    b.Property<int>("CriteriumId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CriteriumName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<float>("GlobalCriteriumPriority");

                    b.Property<int?>("GoalEntityGoalId");

                    b.HasKey("CriteriumId");

                    b.HasIndex("GoalEntityGoalId");

                    b.ToTable("Criteriums");
                });

            modelBuilder.Entity("DAL.GoalEntity", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("GoalName");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("DAL.AlternativeEntity", b =>
                {
                    b.HasOne("DAL.GoalEntity")
                        .WithMany("Alternatives")
                        .HasForeignKey("GoalEntityGoalId");
                });

            modelBuilder.Entity("DAL.CriteriumAlternativeEntity", b =>
                {
                    b.HasOne("DAL.AlternativeEntity", "Alternative")
                        .WithMany("CriteriumAlternatives")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.CriteriumEntity", "Criterium")
                        .WithMany("CriteriumAlternatives")
                        .HasForeignKey("CriteriumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.CriteriumEntity", b =>
                {
                    b.HasOne("DAL.GoalEntity")
                        .WithMany("Criteriums")
                        .HasForeignKey("GoalEntityGoalId");
                });
#pragma warning restore 612, 618
        }
    }
}
